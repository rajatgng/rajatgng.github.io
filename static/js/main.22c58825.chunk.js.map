{"version":3,"sources":["components/Sidebar/Sidebar.tsx","components/Content/About/About.tsx","components/Content/Education/Education.tsx","hoc/ActiveViewport.tsx","components/Content/Experience/Experience.tsx","components/Content/Projects/Projects.tsx","components/Content/Skills/Skills.tsx","components/Content/Certificates/Certificates.tsx","components/Content/Contact/Contact.tsx","components/Content/Content.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sidebar","props","className","id","aria-label","href","onClick","alert","About","Education","ActiveViewport","Component","component","rest","sectionRef","useRef","type","threshold","i","push","cb","entries","observer","targetElement","document","getElementsByClassName","parentArea","rootBounds","height","visibleArea","intersectionRect","toFixed","classList","add","remove","useEffect","IntersectionObserver","observe","current","disconnect","ref","Experience","Projects","Skills","Certificates","Contact","Content","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22c58825.chunk.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport './Sidebar.scss';\nimport PersonIcon from '@material-ui/icons/Person';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport SchoolIcon from '@material-ui/icons/School';\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\nimport ContactMailIcon from '@material-ui/icons/ContactMail';\nimport DescriptionIcon from '@material-ui/icons/Description';\n\ninterface OwnProps {\n    className?: string;\n}\n\ntype Props = OwnProps;\n\nconst Sidebar: FunctionComponent<Props> = (props) => {\n\n    return (\n        <nav className={'sidebar'}>\n            <ul>\n                <li className={'sidebar__listitem sidebar-logo'}>\n                    <a id={\"logo-container\"} aria-label={\"Navigate to the beginning of the page\"} href={\"#intro\"}>\n                        <h1>\n                            Rajat Verma<span>Full Stack Developer</span>\n                        </h1>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-about'}>\n                    <a aria-label={\"Navigate to the About section\"} href={\"#about\"}>\n                        <PersonIcon className={'icon-about'}/>\n                        <span>About</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-exp'}>\n                    <a aria-label=\"Navigate to the Experience section\" href={\"#experience\"}>\n                        <TrendingUpIcon className={'icon-exp'}/>\n                        <span>Experience</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-pro'}>\n                    <a aria-label=\"Navigate to the Projects section\" href={\"#projects\"}>\n                        <AssignmentIcon className={'icon-pro'}/>\n                        <span>Projects</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-skill'}>\n                    <a aria-label=\"Navigate to the Skills section\" href={\"#skills\"}>\n                        <AssessmentIcon className={'icon-skill'}/>\n                        <span>Skills</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-edu'}>\n                    <a aria-label=\"Navigate to the Education section\" href={\"#education\"}>\n                        <SchoolIcon className={'icon-edu'}/>\n                        <span>Education</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-cert'}>\n                    <a aria-label=\"Navigate to the Certificates section\" href={\"#certificates\"}>\n                        <CardMembershipIcon className={'icon-cert'}/>\n                        <span>Certificates</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-cont'}>\n                    <a aria-label=\"Navigate to the Contact section\" href={\"#contact\"}>\n                        <ContactMailIcon className={'icon-cont'}/>\n                        <span>Contact</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem sidebar-resume'}>\n                    <a aria-label=\"Open Rajat's resume in a new tab\" onClick={() => alert(\"Hell\")}>\n                        <DescriptionIcon className={'icon-resume'}/>\n                        <span>Resume</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Sidebar;\n\n\n//\n// const useDragExpander = ({min, max}:any) => {\n//     const [dragState, setDragState] = useState()\n//     const initialPos = useRef(0)\n//     const timer = useRef<Timeout>()\n//\n//     const update = useCallback(xPos =>\n//             setDragState((state:any) => ({...state, delta:initialPos.current - xPos + state.lastDelta}))\n//         , [])\n//\n//     const onDragMouseDown = (e:any) => {\n//         if (e.button != 0) return  // only allow left-mouse clicks\n//         e.preventDefault()\n//         initialPos.current = e.screenX; // re-set initial position\n//         timer.current = setTimeout(dragStart, 0, e) // only allow dragging after N duration mouse down\n//         window.addEventListener('mouseup', unbind)\n//     }\n//\n//     const dragStart = (e:any) => {\n//         setDragState((state:any) => ({...state, lastDelta:state.delta || 0, isDragging:true}))\n//         window.addEventListener('mousemove', onDragMove)\n//     }\n//\n//     const onDragMove = useCallback(e => update(e.screenX), [])\n//\n//     const unbind = () => {\n//         if (timer?.current instanceof Timeout) {\n//             clearTimeout(timer.current);\n//         }\n//         window.removeEventListener('mousemove', onDragMove)\n//         setDragState((state:any) => ({...state, isDragging:false}))\n//     }\n//\n//     const limitDragRange = useCallback(delta =>\n//             Math.min(max, Math.max(min, delta || 0))\n//         , [])\n//\n//     return { onDragMouseDown, onDragMove, dragState, limitDragRange }\n// };\n// const spyScroll = (scrollParent:any, _targetElements:any) => {\n//     if (!scrollParent) return false;\n//\n//     // create an Object with all children that has data-name attribute\n//     const targetElements =\n//         _targetElements ||\n//         [...scrollParent.children].reduce(\n//             (map, item) =>\n//                 item.dataset.name ? { [item.dataset.name]: item, ...map } : map,\n//             {}\n//         );\n//\n//     let bestMatch = {};\n//\n//     for (const sectionName in targetElements) {\n//         if (Object.prototype.hasOwnProperty.call(targetElements, sectionName)) {\n//             const domElm = targetElements[sectionName];\n//             const delta = Math.abs(scrollParent.scrollTop - domElm.offsetTop); // check distance from top, takig scroll into account\n//\n//             if (!bestMatch.sectionName)\n//                 bestMatch = { sectionName, delta };\n//\n//             // check which delet is closest to \"0\"\n//             if (delta < bestMatch.delta) {\n//                 bestMatch = { sectionName, delta };\n//             }\n//         }\n//     }\n//\n//     // update state with best-fit section\n//     return bestMatch.sectionName;\n// };\n// const CurrentScrolledSection = ({ sectionsWrapperRef, children }) => {\n//     const [currentSection, setCurrentSection] = useState()\n//     const throttledOnScroll = _.throttle(\n//         e => setCurrentSection(spyScroll(e.target)),\n//         100\n//     )\n//\n//     // adding the scroll event listener inside this component, and NOT the parent component, to prevent re-rendering of the parent component when\n//     // the scroll listener is fired and the state is updated, which causes noticable lag.\n//     useEffect(() => {\n//         const wrapperElm = sectionsWrapperRef.current;\n//         if (wrapperElm) {\n//             wrapperElm.addEventListener('scroll', throttledOnScroll)\n//             setCurrentSection( spyScroll(wrapperElm) )\n//         }\n//\n//         // unbind\n//         return () => wrapperElm.removeEventListener('scroll', throttledOnScroll)\n//     }, [])\n//\n//     return children(currentSection)\n// }\n// function Aside({data}){\n//     const sectionsWrapperRef = useRef()\n//     const { onDragMouseDown, dragState, limitDragRange } = useDragExpander({min:-50, max:200})\n//\n//     // prepare DOM refs\n//     const sectionsRefs = {}\n//     data.forEach(section => sectionsRefs[section.name] = useRef())\n//\n//     const scrollToTarget = refName => () => {\n//         if (refName && sectionsRefs[refName] && sectionsRefs[refName].current)\n//             // MDN: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n//             sectionsRefs[refName].current.scrollIntoView({behavior:\"smooth\", block:\"start\", inline:\"nearest\"});\n//     }\n//\n//     // side section\n//     const SideSection = useCallback(({children, name, ...rest}) =>\n//         <section ref={sectionsRefs[name]} {...rest}>\n//             <header>{name}</header>\n//             <div className='sideSectionContent'>\n//                 {children}\n//             </div>\n//         </section>, [])\n//\n//\n//     // render-props method: get currently viewed section while scrolling:\n//     return <CurrentScrolledSection sectionsWrapperRef={sectionsWrapperRef}>\n//         {currentSection =>\n//             <aside\n//                 className={`asideComp ${dragState.isDragging ? \"isDragging\" : \"\"}`}\n//                 style={{\"--delta\":limitDragRange(dragState.delta)}}\n//             >\n//                 <nav onMouseDown={onDragMouseDown}>\n//                     {data.map(item => (\n//                         <button\n//                             type=\"button\"\n//                             key={item.name}\n//                             title={_.capitalize(item.name)}\n//                             className={currentSection === item.name ? 'active' : ''}\n//                             onClick={scrollToTarget(item.name)}>\n//                             {item.icon}\n//                         </button>\n//                     ))}\n//                 </nav>\n//\n//                 <div className='asideContent' ref={sectionsWrapperRef}>\n//                     {data.map(item => (\n//                         <SideSection name={item.name} data-name={item.name} className={currentSection === item.name ? 'active' : ''}>\n//                             {item.content}\n//                         </SideSection>\n//                     ))}\n//                 </div>\n//             </aside>\n//         }\n//     </CurrentScrolledSection>\n// }","import React, {FunctionComponent} from 'react';\nimport './About.scss';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst About: FunctionComponent<Props> = (props) => {\n\n    return (\n        <div className={'about'} id={'about'}>\n            Rajat verma About\n        </div>\n    );\n};\n\nexport default About;\n","import React, {FunctionComponent} from 'react';\nimport './Education.scss';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst Education: FunctionComponent<Props> = (props) => {\n    return (\n        <div className={'education'} id={'education'}>\n            educaton\n\n        </div>\n    );\n};\n\nexport default Education;\n","import React, {useEffect, useRef} from 'react';\n\ninterface ActiveViewportProps {\n    component: React.ReactNode;\n    type: string;\n}\n\nconst ActiveViewport: React.FC<ActiveViewportProps> = ({component: Component, ...rest}) => {\n    const sectionRef = useRef(null);\n    const {type} = rest;\n    let threshold: number[] = [];\n    for (let i = 0; i <= 100; i++) {\n        threshold.push(i * 0.01);\n    }\n\n    const cb: IntersectionObserverCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n        let targetElement = document.getElementsByClassName(`sidebar-${type}`);\n        let parentArea = entries[0].rootBounds!.height;\n        let childArea = entries[0].intersectionRect.height;\n        let visibleArea = +(childArea / parentArea).toFixed(2);\n\n        if (visibleArea >= 0.7) {\n            targetElement[0]?.classList.add('sidebar-border-active');\n        } else if (visibleArea <= 0.3) {\n            targetElement[0]?.classList.remove('sidebar-border-active');\n        }\n    };\n\n    useEffect(() => {\n        const options: IntersectionObserverInit = {threshold}\n        const observer = new IntersectionObserver(cb, options);\n        observer.observe(sectionRef.current!);\n        return () => {\n            observer.disconnect();\n        }\n    }, [cb, threshold]);\n\n    return (\n        <section {...rest} ref={sectionRef}>\n            {Component}\n        </section>\n    );\n};\n\nexport default ActiveViewport;\n","import React, {FunctionComponent} from 'react';\nimport './Experience.scss';\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst Experience: FunctionComponent<Props> = (props) => {\n\n    return (\n        <div className={'experience'} id={'experience'}>\n            Experience\n        </div>\n    );\n};\n\nexport default Experience;\n","import React, { FunctionComponent } from 'react';\nimport './Projects.scss'\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Projects: FunctionComponent<Props> = (props) => {\n\n  return (\n      <div className={'projects'} id={'projects'}>\n          Projects\n      </div>\n  );\n};\n\nexport default Projects;\n","import React, { FunctionComponent } from 'react';\nimport './Skills.scss'\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Skills: FunctionComponent<Props> = (props) => {\n\n  return (\n      <div className={'skills'} id={'skills'}>\n          skills\n      </div>\n  );\n};\n\nexport default Skills;\n","import React, { FunctionComponent } from 'react';\nimport './Certificates.scss';\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Certificates: FunctionComponent<Props> = (props) => {\n\n  return (\n      <div className={'certificates'} id={'certificates'}>\n          Certificated\n      </div>\n  );\n};\n\nexport default Certificates;\n","import React, { FunctionComponent } from 'react';\nimport './Contact.scss'\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Contact: FunctionComponent<Props> = (props) => {\n\n  return (\n      <div className={'contact'} id={'contact'}>\n          Contacts\n      </div>\n  );\n};\n\nexport default Contact;\n","import React from 'react';\nimport About from \"./About/About\";\nimport './Content.scss';\nimport Education from \"./Education/Education\";\nimport ActiveViewport from \"../../hoc/ActiveViewport\";\nimport Experience from \"./Experience/Experience\";\nimport Projects from \"./Projects/Projects\";\nimport Skills from \"./Skills/Skills\";\nimport Certificates from \"./Certificates/Certificates\";\nimport Contact from \"./Contact/Contact\";\n\ninterface ContentProps {\n}\n\nconst Content: React.FC<ContentProps> = (props: ContentProps) => {\n\n    return (\n        <section className={'content'}>\n            <ActiveViewport component={<About/>} type={'about'}/>\n            <ActiveViewport component={<Experience/>} type={'exp'}/>\n            <ActiveViewport component={<Projects/>} type={'pro'}/>\n            <ActiveViewport component={<Skills/>} type={'skill'}/>\n            <ActiveViewport component={<Education/>} type={'edu'}/>\n            <ActiveViewport component={<Certificates/>} type={'cert'}/>\n            <ActiveViewport component={<Contact/>} type={'cont'}/>\n        </section>\n    );\n};\n\nexport default Content;\n","import React, {FunctionComponent} from 'react';\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Content from \"../Content/Content\";\nimport './Home.scss'\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst Home: FunctionComponent<Props> = (props) => {\n    return (\n        <main className={'home'}>\n            <Sidebar/>\n            <div className={'home--margin-fixes'}/>\n            <Content/>\n        </main>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from \"./components/Home/Home\";\n\nfunction App() {\n    return (\n        <Home/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}