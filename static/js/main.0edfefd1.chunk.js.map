{"version":3,"sources":["components/Sidebar/Sidebar.tsx","components/Content/About/About.tsx","components/Content/Education/Education.tsx","components/Content/Content.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sidebar","props","className","id","aria-label","href","About","Education","Content","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRA4DeA,G,UAnD2B,SAACC,GACvC,OACI,yBAAKC,UAAW,WACZ,4BACI,wBAAIA,UAAW,qBACX,uBAAGC,GAAI,iBAAkBC,aAAY,wCAAyCC,KAAM,UAChF,0CACe,yDAIvB,wBAAIH,UAAW,qBACX,uBAAGE,aAAY,gCAAiCC,KAAM,UAClD,yCAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,qCAAqCC,KAAM,eACrD,8CAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,mCAAmCC,KAAM,aACnD,4CAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,iCAAiCC,KAAM,WACjD,0CAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,oCAAoCC,KAAM,cACpD,6CAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,kCAAkCC,KAAM,YAClD,2CAGR,wBAAIH,UAAW,qBACX,uBAAGE,aAAW,oCACV,8CCpCTE,G,MATyB,SAACL,GAErC,OACI,6BAASC,UAAW,QAASC,GAAI,SAAjC,uBCMOI,G,YAV6B,SAACN,GAE3C,OACI,yBAAKC,UAAW,YAAaC,GAAI,aAAjC,cCWSK,EAV2B,SAACP,GAEvC,OACI,6BAASC,UAAW,WAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKGO,G,MAVwB,SAACR,GAEpC,OACI,0BAAMC,UAAW,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCLGQ,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0edfefd1.chunk.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport './Sidebar.scss';\n\ninterface OwnProps {\n    className?:string\n}\n\ntype Props = OwnProps;\n\nconst Sidebar: FunctionComponent<Props> = (props) => {\n    return (\n        <nav className={'sidebar'}>\n            <ul>\n                <li className={'sidebar__listitem'}>\n                    <a id={\"logo-container\"} aria-label={\"Navigate to the beginning of the page\"} href={\"#intro\"}>\n                        <h1>\n                            Rajat Verma<span>Full Stack Developer</span>\n                        </h1>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label={\"Navigate to the About section\"} href={\"#about\"}>\n                        <span>About</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Navigate to the Experience section\" href={\"#experience\"}>\n                        <span>Experience</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Navigate to the Projects section\" href={\"#projects\"}>\n                        <span>Projects</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Navigate to the Skills section\" href={\"#skills\"}>\n                        <span>Skills</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Navigate to the Education section\" href={\"#education\"}>\n                        <span>Education</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Navigate to the Contact section\" href={\"#contact\"}>\n                        <span>Contact</span>\n                    </a>\n                </li>\n                <li className={'sidebar__listitem'}>\n                    <a aria-label=\"Open Rajat's resume in a new tab\">\n                        <span>Resume</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Sidebar;\n","import React, {FunctionComponent} from 'react';\nimport './About.scss';\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst About: FunctionComponent<Props> = (props) => {\n\n    return (\n        <section className={'about'} id={'about'}>\n            Rajat verma About\n        </section>\n    );\n};\n\nexport default About;\n","import React, { FunctionComponent } from 'react';\nimport './Education.scss';\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Education: FunctionComponent<Props> = (props) => {\n\n  return (\n      <div className={'education'} id={'education'}>\n          educaton\n\n      </div>\n  );\n};\n\nexport default Education;\n","import React, {FunctionComponent} from 'react';\nimport About from \"./About/About\";\nimport './Content.scss';\nimport Education from \"./Education/Education\";\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst Content: FunctionComponent<Props> = (props) => {\n\n    return (\n        <section className={'content'}>\n            <About/>\n            <Education/>\n        </section>\n    );\n};\n\nexport default Content;\n","import React, {FunctionComponent} from 'react';\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Content from \"../Content/Content\";\nimport './Home.scss'\n\ninterface OwnProps {\n}\n\ntype Props = OwnProps;\n\nconst Home: FunctionComponent<Props> = (props) => {\n\n    return (\n        <main className={'home'}>\n            <Sidebar/>\n            <Content/>\n        </main>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from \"./components/Home/Home\";\nfunction App() {\n    return (\n        <div>\n            <Home/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}